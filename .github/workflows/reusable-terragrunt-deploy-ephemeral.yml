name: Deploy Terragrunt Sandbox Ephemeral Environment
on:
  workflow_call:
    inputs:
      git_branch:
        description: 'Branch triggering this deploy.'
        required: true
        type: string
      tf_version:
          description: 'Version of Terraform to utilize'
          required: true
          default: '1.5.5'
          type: string
      tg_version:
        description: 'Version of Terragrunt to utilize'
        required: true
        default: '0.54.11'
        type: string
      assume_role_arn:
        description: 'ARN of the role to assume prior to Terragrunt invocation. Terragrunt may use this role to assume other roles if configured to do so.'
        required: true
        type: string
      region:
        description: 'Region within the environment (e.g. us-east-1) to deploy'
        required: true
        type: string
      env_id:
        description: 'Instance within the region (e.g. 000) to deploy.'
        required: true
        type: string

permissions:
    id-token: write
    contents: read

jobs:
  deploy:
    name: "Plan & Deploy ephemeral/${{ inputs.region }}/${{ inputs.env_id }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@3d8cba388a057b13744d61818a337e40a119b1a7
        with:
          role-to-assume: ${{ inputs.assume_role_arn }}
          role-session-name: ${{ github.run_id }}
          aws-region: ${{ inputs.region }}

      - name: "Set default Terraform Tags"
        id: set-tags
        run: |
            set -x
            echo "TF_VAR_organization_tag=${{ github.repository_owner }}" >> "$GITHUB_OUTPUT"
            echo "TF_VAR_repository_tag=$(echo "${{ github.repository }}" | cut -d "/" -f 2)" >> "$GITHUB_OUTPUT"
            echo "TF_VAR_commit_hash_tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"
            echo "TF_VAR_branch_tag=${{ inputs.git_branch }}" >> "$GITHUB_OUTPUT"

      - name: Plan
        id: plan
        uses: gruntwork-io/terragrunt-action@aee21a7df999be8b471c2a8564c6cd853cb674e1
        env:
            AWS_REGION: ${{ inputs.region }}
            INPUT_PRE_EXEC_0: |
              sudo apt update -yqq && sudo apt install python3 -yqq
            TF_VAR_organization_tag: ${{ steps.set-tags.outputs.TF_VAR_organization_tag }}
            TF_VAR_repository_tag: ${{ steps.set-tags.outputs.TF_VAR_repository_tag }}
            TF_VAR_commit_hash_tag: ${{ steps.set-tags.outputs.TF_VAR_commit_hash_tag }}
            TF_VAR_branch_tag: ${{ steps.set-tags.outputs.TF_VAR_branch_tag }}
            GIT_BRANCH: ${{ inputs.git_branch }}
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: 'platform/sandbox/${{ inputs.region }}/${{ inputs.env_id }}'
          tg_command: 'plan -out=ephemeral-${{ inputs.region }}-${{ inputs.env_id }}.tfplan'

      - name: Deploy
        uses: gruntwork-io/terragrunt-action@aee21a7df999be8b471c2a8564c6cd853cb674e1
        env:
            AWS_REGION: ${{ inputs.region }}
            INPUT_PRE_EXEC_0: |
              sudo apt update -yqq && sudo apt install python3 -yqq
            TF_VAR_organization_tag: ${{ steps.set-tags.outputs.TF_VAR_organization_tag }}
            TF_VAR_repository_tag: ${{ steps.set-tags.outputs.TF_VAR_repository_tag }}
            TF_VAR_commit_hash_tag: ${{ steps.set-tags.outputs.TF_VAR_commit_hash_tag }}
            TF_VAR_branch_tag: ${{ steps.set-tags.outputs.TF_VAR_branch_tag }}
            GIT_BRANCH: ${{ inputs.git_branch }}
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: 'platform/sandbox/${{ inputs.region }}/${{ inputs.env_id }}'
          tg_command: 'apply ephemeral-${{ inputs.region }}-${{ inputs.env_id }}.tfplan'
